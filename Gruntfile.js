// Generated by CoffeeScript 1.6.2
module.exports = function(grunt) {
  var preparationTasks, testacularConfig;

  grunt.loadNpmTasks("grunt-contrib-concat");
  grunt.loadNpmTasks("grunt-contrib-uglify");
  grunt.loadNpmTasks("grunt-contrib-clean");
  grunt.loadNpmTasks("grunt-contrib-coffee");
  grunt.loadNpmTasks("grunt-contrib-copy");
  grunt.loadNpmTasks("grunt-contrib-watch");
  grunt.loadNpmTasks("grunt-conventional-changelog");
  grunt.loadNpmTasks("grunt-recess");
  grunt.loadNpmTasks("grunt-testacular");
  grunt.loadNpmTasks("grunt-html2js");
  grunt.registerTask("fly", "Development build", function() {
    grunt.log.writeln("Development build");
    grunt.config("isProduction", false);
    return grunt.task.run("dev");
  });
  grunt.registerTask("serverOnly", "Server", function() {
    grunt.log.writeln("Server");
    grunt.config("isProduction", false);
    return grunt.task.run(["server", "watch:server"]);
  });
  preparationTasks = ["coffee:fixtures", "concat:vendor", "coffee:dev", "concat:dev"];
  grunt.registerTask("dev-prepare", preparationTasks);
  grunt.registerTask("dev", ["clean", "recess:vendor", "cssdev", "dev-prepare", "server", "watch:views"]);
  grunt.registerTask("run", "dev reminder", function() {
    return grunt.log.writeln("Dude, I'm an eagle. I don't run, I fly! Use: grunt fly");
  });
  grunt.registerTask("coffee-compile", "compile all coffee", function() {
    grunt.log.writeln("--------- compiling coffee ---------");
    return grunt.task.run("coffee:dev");
  });
  grunt.registerTask("e2e-prepare", "config e2e and concat:dev", function() {
    grunt.log.writeln("--------- preparing index.html for e2e testing ---------");
    grunt.config("isE2E", true);
    return grunt.task.run("concat:dev");
  });
  grunt.registerTask("cssdev", ["recess:latest", "concat:cssdev"]);
  grunt.registerTask("release", "Production build", function() {
    grunt.config("isProduction", true);
    return grunt.task.run("prod");
  });
  grunt.registerTask("prod", ["clean", "recess:vendor", "cssdev", "coffee:dev", "concat:vendor", "uglify", "concat:prod", "recess:prod", "copy:assets", "preflight"]);
  grunt.registerTask("preflight", ["server:dist", "watch:views"]);
  grunt.registerTask("test", "run all tests (unit, midway, e2e)", function() {
    var done;

    done = this.async();
    return require("child_process").exec("grunt coffee-compile", function(err, stdout) {
      return require("child_process").exec("grunt e2e-prepare", function(err, stdout) {
        var e2eServer, errOutput, outputTestResults, spawn, testsComplete;

        spawn = void 0;
        e2eServer = void 0;
        errOutput = "";
        testsComplete = 0;
        outputTestResults = function() {
          e2eServer.kill();
          return done(errOutput);
        };
        require("./app-server.js").listen(8000).on("close", done);
        spawn = require("child_process").spawn;
        e2eServer = spawn("./scripts/lib/e2e_server.js 8100");
        require("child_process").exec("./node_modules/.bin/karma start test/config/unit.js --single-run", function(err, stdout) {
          grunt.log.write("\n--------- Unit Test Results ---------\n\n" + stdout);
          errOutput += err;
          testsComplete++;
          if (testsComplete === 3) {
            return outputTestResults();
          }
        });
        require("child_process").exec("./node_modules/.bin/karma start test/config/midway.js --single-run", function(err, stdout) {
          grunt.log.write("\n--------- Midway Test Results ---------\n\n" + stdout);
          errOutput += err;
          testsComplete++;
          if (testsComplete === 3) {
            return outputTestResults();
          }
        });
        return require("child_process").exec("./node_modules/.bin/karma start test/config/e2e.js --single-run", function(err, stdout) {
          grunt.log.write("\n--------- E2E Test Results ---------\n\n" + stdout);
          errOutput += err;
          testsComplete++;
          if (testsComplete === 3) {
            return outputTestResults();
          }
        });
      });
    });
  });
  grunt.registerTask("test:unit", "run unit tests", function() {
    var done;

    done = this.async();
    return require("child_process").exec("grunt coffee-compile", function(err, stdout) {
      return require("child_process").exec("./node_modules/.bin/karma start test/config/unit.js --single-run", function(err, stdout) {
        grunt.log.write(stdout);
        return done(err);
      });
    });
  });
  grunt.registerTask("test:midway", "run midway tests", function() {
    var done;

    done = this.async();
    return require("child_process").exec("grunt coffee-compile", function(err, stdout) {
      require("./app-server.js").listen(8000).on("close", done);
      return require("child_process").exec("./node_modules/.bin/karma start test/config/midway.js --single-run", function(err, stdout, stderr) {
        grunt.log.write(stdout);
        return done(err);
      });
    });
  });
  grunt.registerTask("test:e2e", "run e2e tests", function() {
    var done, e2eServer, spawn;

    require("child_process").exec("grunt e2e-prepare");
    done = this.async();
    spawn = void 0;
    e2eServer = void 0;
    require("./app-server.js").listen(8000).on("close", done);
    spawn = require("child_process").spawn;
    e2eServer = spawn("./scripts/lib/e2e_server.js 8100");
    return require("child_process").exec("./node_modules/.bin/karma start test/config/e2e.js --single-run", function(err, stdout, stderr) {
      grunt.log.write(stdout);
      e2eServer.kill();
      return done(err);
    });
  });
  grunt.registerTask("test-watch", ["testacular:watch"]);
  grunt.registerTask("travis", ["concat:vendor", "concat:dev", "testacular:unit"]);
  grunt.registerTask("timestamp", function() {
    return grunt.log.subhead(Date());
  });
  grunt.registerTask("server", "custom preview server using express", function() {
    grunt.log.writeln("Express server listening on port 8000");
    require("./app-server.js").listen(8000);
    return require("child_process").exec("open \"http://localhost:8000\"");
  });
  grunt.registerTask("server:dist", "custom preview server using express targeting dist", function() {
    var done;

    grunt.log.writeln("Express server listening on port 8500");
    done = this.async();
    require("./dist-server.js").listen(8500).on("close", done);
    return require("child_process").exec("open \"http://localhost:8500\"");
  });
  testacularConfig = function(configFile, customOptions) {
    var options, travisOptions;

    options = {
      configFile: configFile,
      keepalive: true
    };
    travisOptions = process.env.TRAVIS && {
      browsers: ["Firefox"],
      reporters: "dots"
    };
    return grunt.util._.extend(options, customOptions, travisOptions);
  };
  return grunt.initConfig({
    isProduction: false,
    isE2E: false,
    distdir: "dist",
    pkg: grunt.file.readJSON("package.json"),
    banner: "/*! <%= pkg.title || pkg.name %> - v<%= pkg.version %> - <%= grunt.template.today(\"yyyy-mm-dd\") %>\n" + "<%= pkg.homepage ? \" * \" + pkg.homepage + \"\\n\" : \"\" %>" + " * Copyright (c) <%= grunt.template.today(\"yyyy\") %> <%= pkg.author %>;\n" + " * Licensed <%= _.pluck(pkg.licenses, \"type\").join(\", \") %>\n */\n",
    src: {
      js: ["app/js/config/design.js", "app/js/config/config.js", "app/js/config/router.js", "app/js/config/bizbuilt.js", "app/js/modules/**/*.js", "app/js/controllers/**/*.js", "app/js/directives/**/*.js", "app/js/filters/**/*.js", "app/js/services/**/*.js", "app/js/app.js"],
      vendor: ["vendor/js/utils/es5-shim.min.js", "vendor/js/utils/json3.min.js", "vendor/js/jquery/jquery-1.9.1.min.js", "vendor/js/jquery/jquery-ui-1.10.3.sortable.min.js", "vendor/js/utils/*.js", "vendor/js/jquery/jquery.scrollIntoView.js", "vendor/js/jquery/select2.js", "vendor/js/jquery/code.photoswipe.jquery-3.0.5-bbcustomized.min.js", "vendor/js/jquery/jquery.ba-outside-events.min.js", "vendor/js/jquery/jquery.masonry.min.js", "vendor/js/aviary/feather.js", "vendor/js/swipe/*.js", "vendor/js/angular/angular.min.js", "vendor/js/angular/angular-resource.min.js", "vendor/js/angular/angular-sanitize.min.js", "vendor/js/angular/angular-mobile.js", "vendor/js/angular-ui/ui-utils/modules/*.js", "vendor/js/angular-ui/ui-utils/utils.js", "vendor/js/angular-ui/ng-grid.js", "vendor/js/angular-ui/ui-bootstrap-0.4.0-bbcustomized.js", "vendor/js/angular-ui/ui-map.js", "vendor/js/angular-ui/ui-select2.js", "vendor/js/hammer/*.js", "vendor/js/filepicker/filepicker.min.js", "vendor/js/local-storage/lawnchair-0.6.1-bbcustomized.js"],
      fixtures: {
        js: ["app/fixtures/js/**/*.js"]
      },
      specs: ["test/**/spec*.js"],
      scenarios: ["test/e2e/**/scenario*.js"],
      html: ["app/index-edit-me.html", "app/views/**/*.html"],
      less: ["app/less/index.less"]
    },
    clean: ["<%= distdir %>", "app/js/angular", "app/js/app.js", "app/js/vendor.js", "app/js/config", "app/js/controllers", "app/js/directives", "app/js/filters", "app/js/modules", "app/js/services", "app/css"],
    copy: {
      assets: {
        files: [
          {
            dest: "<%= distdir %>/img",
            src: "**",
            expand: true,
            cwd: "app/img/"
          }, {
            dest: "<%= distdir %>/views",
            src: "**",
            expand: true,
            cwd: "app/views/"
          }, {
            dest: "<%= distdir %>/template",
            src: "**",
            expand: true,
            cwd: "app/template/"
          }, {
            dest: "<%= distdir %>/js/design.js",
            src: "**",
            expand: true,
            cwd: "app/js/design.js"
          }, {
            dest: "<%= distdir %>/js/compatibility",
            src: "**",
            expand: true,
            cwd: "app/js/compatibility/"
          }
        ]
      }
    },
    coffee: {
      fixtures: {
        options: {
          bare: true
        },
        expand: true,
        cwd: "app/fixtures/coffee",
        src: ["**/*.coffee"],
        dest: "app/fixtures/js",
        ext: ".js"
      },
      dev: {
        options: {
          bare: true
        },
        expand: true,
        cwd: "app/coffee",
        src: ["**/*.coffee"],
        dest: "app/js",
        ext: ".js"
      }
    },
    testacular: {
      unit: {
        options: testacularConfig("test/config/unit.js", {
          singleRun: true
        })
      },
      midway: {
        options: testacularConfig("test/config/midway.js", {
          singleRun: true
        })
      },
      e2e: {
        options: testacularConfig("test/config/e2e.js", {
          singleRun: true
        })
      },
      watch: {
        options: testacularConfig("test/config/unit.js", {
          singleRun: false,
          autoWatch: true
        })
      }
    },
    manifest: {
      dist: {
        options: {},
        src: ["css/*.css", "js/**/*.js", "template/**/*.html", "img/**/*", "views/**/*.html", "*"],
        dest: "<%= distdir %>/manifest.appcache"
      }
    },
    concat: {
      cssdev: {
        src: ["app/css/vendor.css", "app/css/latest.css"],
        dest: "app/css/infowrap.css",
        options: {
          process: true
        }
      },
      vendor: {
        options: {
          separator: ";\n"
        },
        src: ["<%= src.vendor %>"],
        dest: "app/js/vendor.js"
      },
      dev: {
        src: ["app/index-edit-me.html"],
        dest: "app/index.html",
        options: {
          process: true
        }
      },
      prod: {
        src: ["app/index-edit-me.html"],
        dest: "<%= distdir %>/index.html",
        options: {
          process: true
        }
      }
    },
    uglify: {
      dist: {
        options: {
          banner: "<%= banner %>"
        },
        src: ["app/js/vendor.js", "<%= src.js %>"],
        dest: "<%= distdir %>/js/<%= pkg.name %>.js"
      }
    },
    recess: {
      dev: {
        files: {
          "app/css/<%= pkg.name %>.css": ["<%= src.less %>"]
        },
        options: {
          compile: true
        }
      },
      latest: {
        files: {
          "app/css/latest.css": "app/less/index.less"
        },
        options: {
          compile: true
        }
      },
      prod: {
        files: {
          "<%= distdir %>/css/<%= pkg.name %>.css": ["<%= src.less %>"]
        },
        options: {
          compress: true
        }
      },
      vendor: {
        files: {
          "app/css/vendor.css": "app/less/vendor/index.less"
        },
        options: {
          compile: true
        }
      }
    },
    watch: {
      views: {
        files: ["app/index-edit-me.html"],
        tasks: ["concat:dev", "timestamp"]
      },
      cssdev: {
        files: ["app/less/**/*.less"],
        tasks: ["cssdev"]
      },
      coffeeForTests: {
        files: ["app/coffee/**/*.coffee"],
        tasks: ["coffee:dev"]
      },
      server: {
        files: ["nothing.server"],
        tasks: ["timestamp"]
      }
    },
    changelog: {
      options: {
        dest: "CHANGELOG.md",
        templateFile: "changelog.tpl.md"
      }
    }
  });
};
