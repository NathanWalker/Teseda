// Generated by CoffeeScript 1.6.2
(function() {
  var App;

  App = window.App = angular.module("TesedaApp", ["Logger", "LoadingSpinner", "ErrorMsgs", "LocalStorage", "AppControllers", "AppDirectives", "AppServices", "AppFilters", "AppRoutes", "User", "UXTracking", "ngMobile", "ngSanitize", "ui.utils", "ui.map", "ui.select2", "ui.bootstrap", "ElementResizer", "AppCache", "Network", "AppSettings", "Modal", "Breadcrumbs", "OAuth", "StaticText", "ngTable"]);

  App.constant("FAKE_MOBILE", false).constant("GOOGLE_MAPS_ENABLED", true);

  App.value("Logger.config", {
    debug: Teseda.prop.debug
  }).value("ErrorMsgs.config", {
    showMessages: true
  }).value("UXTracking.config", {
    enabled: !Teseda.prop.debug
  }).value("ElementResizer.config", {
    enabled: true,
    debug: false,
    venue: {
      max: 1600,
      min: 320
    },
    targets: DESIGN.targets
  }).value("ui.config", {}).value("OAuth.config", {
    providers: Teseda.thirdParties
  }).value("AppCache.config", {
    enabled: true,
    disablePromptOnUpdate: Teseda.prop.debug
  }).value("AppSettings.config", {
    defaultSettings: {
      timestampDisplay: "full",
      activeFilterBtns: {},
      activeToggleBtns: {},
      activeSortBtns: {},
      componentSort: {
        files: {
          name: 'asc'
        }
      },
      version: Teseda.util.parseVersion(Teseda.prop.version)
    }
  });

  App.config([
    '$compileProvider', function($compileProvider) {
      return $compileProvider.urlSanitizationWhitelist(/^\s*(https?|ftp|tel|mailto|file|chrome-extension):/);
    }
  ]);

  App.run([
    "FAKE_MOBILE", "LogService", "UXTrackingService", "$rootScope", "$location", "$window", "$timeout", "$http", "StaticTextService", "UserService", "AppSettingsService", "ModalService", "BreadcrumbService", function(fakeMobile, log, ux, $rootScope, $location, $window, $timeout, $http, statictext, userService, settings, modal, bcService) {
      /*
      Setup certain route specific methods on $rootScope
      */

      var prefix, routeChangeFunctions, updateNav;

      prefix = "";
      if (!CONFIG.routing.html5Mode) {
        prefix = "#" + CONFIG.routing.prefix;
      }
      /*
      Convenience properties
      */

      $rootScope.platform = Teseda.platform;
      if (fakeMobile) {
        $rootScope.platform.IS_MOBILE = true;
      }
      $rootScope.RequireRemoteAuthentication = false;
      $rootScope.HasGeolocation = $window.navigator.geolocation && typeof $window.navigator.geolocation.getCurrentPosition === "function";
      $rootScope.UserDeniedLocation = false;
      $rootScope.statictext = statictext;
      $rootScope.leftbariScroll;
      $rootScope.rightbariScroll;
      $rootScope.menuEnabled = false;
      $rootScope.toggleMenu = function(force) {
        return $rootScope.menuEnabled = _.isNothing(force) ? !$rootScope.menuEnabled : force;
      };
      updateNav = function() {
        _.forEach($rootScope.mainNav, function(l) {
          l.active = false;
        });
        return _.forEach($rootScope.mainNav, function(l) {
          if (l.link === $location.url()) {
            return l.active = true;
          }
        });
      };
      $rootScope.mainNav = [
        {
          label: 'Home',
          link: '/',
          active: false,
          useCarousel: true
        }, {
          label: 'Products',
          link: '/products',
          active: false,
          useCarousel: false,
          dropdown: {
            options: [
              {
                label: 'V550',
                link: '/products?id=V550'
              }, {
                label: 'V520',
                link: '/products?id=V520'
              }
            ]
          }
        }, {
          label: 'About',
          link: '/about',
          active: false,
          useCarousel: false
        }, {
          label: 'Contact',
          link: '/contact',
          active: false,
          useCarousel: false
        }
      ];
      $rootScope.carouselInterval = 6000;
      $rootScope.carouselActive = function() {
        var activeRoute;

        activeRoute = _.find($rootScope.mainNav, function(l) {
          return l.link === $location.url();
        });
        if (activeRoute) {
          return activeRoute.useCarousel;
        } else {
          return false;
        }
      };
      $rootScope.carouselSlides = [
        {
          active: true,
          view: 'views/carousel/1.html'
        }, {
          active: false,
          view: 'views/carousel/2.html'
        }, {
          active: false,
          view: 'views/carousel/3.html'
        }, {
          active: false,
          view: 'views/carousel/4.html'
        }
      ];
      $rootScope.currentYear = new Date().getFullYear();
      $rootScope.safeApply = function(fn) {
        var phase;

        phase = this.$root.$$phase;
        if (phase !== "$apply" && phase !== "$digest") {
          return $rootScope.$apply(fn);
        }
      };
      /*
      Site Navigation and Utilities
      */

      $rootScope.isCurrentLocation = function(routeArray) {
        return _.contains(routeArray, $location.url());
      };
      routeChangeFunctions = [];
      $rootScope.changeRoute = function(route) {
        $rootScope.sidebarToggle(null, false);
        return $location.url(route);
      };
      $rootScope.pageNotFound = function() {
        return $location.url("/_404");
      };
      $rootScope.$on("changeRoute", function(e, route) {
        return $rootScope.changeRoute(route);
      });
      $rootScope.$watch("leftbarActive", function(val) {
        $rootScope.rightbarActive = false;
        return $rootScope.barActiveSide = (val ? "left" : "");
      });
      $rootScope.$watch("rightbarActive", function(val) {
        $rootScope.leftbarActive = false;
        return $rootScope.barActiveSide = (val ? "right" : "");
      });
      $rootScope.$on(Teseda.scope.events.sidebar.toggle, function(e, type, force) {
        return $rootScope.sidebarToggle(type, force);
      });
      $rootScope.sidebarToggle = function(type, force) {
        var changeResult;

        changeResult = {
          type: type
        };
        if (_.isNothing(force)) {
          Teseda.util.hideBarScrollTo(5);
          if (type === "left" && $rootScope.rightbarActive) {
            $rootScope.rightbarActive = false;
          } else if (type === "right" && $rootScope.leftbarActive) {
            $rootScope.leftbarActive = false;
          }
          $rootScope[type + "barActive"] = !$rootScope[type + "barActive"];
          _.extend(changeResult, {
            enabled: $rootScope[type + "barActive"]
          });
        } else {
          $rootScope.rightbarActive = $rootScope.leftbarActive = force;
          _.extend(changeResult, {
            enabled: force
          });
        }
        return $rootScope.$broadcast(Teseda.scope.events.sidebar.change, changeResult);
      };
      $rootScope.isSidebarActive = function(type) {
        return $rootScope[type + "barActive"];
      };
      $rootScope.sidebarActiveClass = function(type) {
        if ($rootScope[type + "barActive"]) {
          return "active";
        } else {
          return "";
        }
      };
      $rootScope.pageCloseSidebar = function(e) {
        var isGrip;

        if (!_.isNothing(e)) {
          isGrip = _.contains(['grip-leftbar', 'grip-rightbar'], $(e.target).attr('data-icon'));
          if (!isGrip) {
            return $rootScope.sidebarToggle(null, false);
          }
        }
      };
      $rootScope.$on("$routeChangeStart", function(e, next, current) {
        log('---- $routeChangeStart');
        $rootScope.viewPageClass = void 0;
        return bcService.clear();
      });
      $rootScope.$on("$routeChangeError", function(event, current, previous, rejection) {
        return log("ROUTE CHANGE ERROR: " + rejection);
      });
      $rootScope.$on("$routeChangeSuccess", function(event, current, previous, rejection) {
        log('---- $routeChangeSuccess');
        ux.pageview($location.url());
        return updateNav();
      });
      /*
      force a page refresh with specified route
      */

      $rootScope.refreshPageWithRoute = function(route) {
        log("refreshPageWithRoute: " + route);
        return $window.location.href = route;
      };
      /*
      google maps helper
      */

      $rootScope.initGoogleMaps = function() {
        $rootScope.googleMapsReady = true;
        return $rootScope.$broadcast(Teseda.scope.events.google.mapsReady);
      };
      /*
      window overrides
      */

      $rootScope.alert = function(msg) {
        return ($window.mockWindow || $window).alert(msg);
      };
      $rootScope.confirm = function(msg) {
        return ($window.mockWindow || $window).confirm(msg);
      };
      /*
      <html> level page class
      @returns {string}
      */

      $rootScope.viewPageClass = void 0;
      $rootScope.pageClass = function() {
        var pClass;

        pClass = '';
        if ($rootScope.viewPageClass) {
          pClass = "page-" + $rootScope.viewPageClass;
        } else {
          if (_.contains($location.url(), 'account') && _.contains($location.url(), 'settings')) {
            pClass = 'account-settings';
          } else {
            pClass = Teseda.util.pageClassFromRoute($location.url());
          }
          pClass = "page-" + pClass;
        }
        return pClass + (Teseda.platform.IS_MOBILE ? ' is-mobile' : '');
      };
      /*
      REMOTE SERVER ERROR HANDLING
      */

      $rootScope.$on(Teseda.scope.events.errors.unauthorized, function(e, showMsg) {
        $rootScope.changeRoute("/login");
        if (showMsg) {
          return $rootScope.alert(statictext.login.errorUnauthorized);
        }
      });
      $rootScope.$on(Teseda.scope.events.errors.internalServerError, function(e) {
        return $rootScope.changeRoute("/_500");
      });
      $rootScope.$on(Teseda.scope.events.user.loginRequired, function(e, showMsg) {
        if (showMsg) {
          return $rootScope.alert(statictext.login.errorMsg);
        }
      });
      /*
      window handling
      */

      $($window).on('beforeunload', function() {
        if ($rootScope.uploadsInProgress) {
          return statictext.wraps.fileUploadsInProgress;
        }
      });
      /*
      INIT CORE SERVICES
      Order here is important!
      */

      settings.init();
      userService.init();
      return updateNav();
    }
  ]);

}).call(this);
